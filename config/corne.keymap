#include "keys_br_abnt2.h"
#include "helper.h"
#include "accents.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUME 1
#define SYMB 2
#define FUNC 3
#define GAME 4
#define NAVI 5
#define FGAM 6
#define ACCE 7

AC_KEY(A_acute, BR_A, BR_ACUT)
AC_KEY(A_grave, BR_A, BR_GRAVE)
AC_KEY(A_tilde, BR_A, BR_TILDE)
AC_KEY(A_circ,  BR_A, BR_CIRC)

AC_KEY(E_acute, BR_E, BR_ACUT)
AC_KEY(E_circ,  BR_E, BR_CIRC)

AC_KEY(I_acute, BR_I, BR_ACUT)

AC_KEY(O_acute, BR_O, BR_ACUT)
AC_KEY(O_tilde, BR_O, BR_TILDE)
AC_KEY(O_circ,  BR_O, BR_CIRC)

AC_KEY(U_acute, BR_U, BR_ACUT)

UNDEAD_KEY(tilde, BR_TILDE)
UNDEAD_KEY(caret, BR_CIRC)
UNDEAD_KEY(grave, BR_GRAVE)

// Behavior configuration

&mt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    quick_tap_ms = <0>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <500>;
    quick-release;
};


/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <TAPPING_TERM>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };


 combos {
        compatible = "zmk,combos";

        // combo_esc {
        //timeout-ms = <50>;
        //key-positions = <13 16>;
        //  bindings = <&caps_word>;
        //  };

        game {
            timeout-ms = <50>;
            bindings = <&tog 4>;
            key-positions = <34 13 12>;
            layers = <0>;
        };

        close {
            timeout-ms = <50>;
            bindings = <&close>;
            key-positions = <0 1 2 3>;
            layers = <0>;
        };

        prtsc_combo {
            timeout-ms = <50>;
            bindings = <&kp PRINTSCREEN>;
            key-positions = <5 4>;
            layers = <0>;
        };

        caps {
            timeout-ms = <50>;
            bindings = <&caps_word>;
            key-positions = <22 23 24 21>;
            layers = <0>;
        };

        esc {
            timeout-ms = <50>;
            bindings = <&kp ESC>;
            key-positions = <11 12 13>;
            layers = <0>;
        };

        del {
            timeout-ms = <50>;
            bindings = <&kp DEL>;
            key-positions = <8 9>;
            layers = <0>;
        };

        quest {
            bindings = <&kp BR_QMARK>;
            key-positions = <29 28 27>;
            layers = <0>;
        };

        lgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <10 11>;
            layers = <0>;
        };

        rgui {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <19 18>;
            layers = <0>;
        };

        lock {
            bindings = <&lock>;
            key-positions = <6 7 8>;
            layers = <5>;
        };

        copy {
            bindings = <&copy>;
            key-positions = <23 22>;
            layers = <0>;
        };

        paste {
            bindings = <&paste>;
            key-positions = <23 24>;
            layers = <0>;
        };

        n1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <0 10>;
            layers = <0>;
        };

        n2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <1 11>;
            layers = <0>;
        };

        n3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <2 12>;
            layers = <0>;
        };

        n4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <3 13>;
            layers = <0>;
        };

        n5 {
            bindings = <&kp NUMBER_5>;
            key-positions = <4 14>;
            layers = <0>;
        };

        n6 {
            bindings = <&kp NUMBER_6>;
            key-positions = <5 15>;
            layers = <0>;
        };

        n7 {
            bindings = <&kp NUMBER_7>;
            key-positions = <6 16>;
            layers = <0>;
        };

        n8 {
            bindings = <&kp NUMBER_8>;
            key-positions = <7 17>;
            layers = <0>;
        };

        n9 {
            bindings = <&kp NUMBER_9>;
            key-positions = <8 18>;
            layers = <0>;
        };

        n0 {
            bindings = <&kp NUMBER_0>;
            key-positions = <9 19>;
            layers = <0>;
        };

        tec {
            bindings = <&tog 7>;
            key-positions = <33 36>;
            layers = <0>;
        };

        circ {
            bindings = <&kp BR_CIRC>;
            key-positions = <7 8>;
            layers = <0>;
        };

        agud {
            bindings = <&kp BR_ACUT>;
            key-positions = <17 18>;
            layers = <0>;
        };

        til {
            bindings = <&kp BR_TILDE>;
            key-positions = <28 29>;
            layers = <0>;
        };

        grave {
            bindings = <&kp BR_GRAVE>;
            key-positions = <16 17>;
            layers = <0>;
        };
    };

    macros {
        close: close {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp F4>,
                <&macro_release>,
                <&kp LALT>;
        };

        cao: cao {
            compatible = "zmk,behavior-macro";
            label = "CAO";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp BR_CCED>,
                <&macro_tap_time 20>,
                <&A_tilde>;
        };

        guilt: guilt {
            compatible = "zmk,behavior-macro";
            label = "GUILT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };

        guirt: guirt {
            compatible = "zmk,behavior-macro";
            label = "GUIRT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_WIN>;
        };

        lock: lock {
            compatible = "zmk,behavior-macro";
            label = "LOCK";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp L>,
                <&macro_release>,
                <&kp LEFT_GUI>;
        };

        gui_up: gui_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "GUI_UP";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LEFT_CONTROL>;

            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LEFT_CONTROL>;

            label = "PASTE";
        };
     };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp TAB    &kp Q  &kp W       &kp E           &kp R         &kp T        &kp Y    &kp U        &kp I        &kp O       &kp P         &kp C_VOLUME_UP
&kp LSHFT  &kp A  &hm LALT S  &hm LSHFT D     &hm LCTRL F   &kp G        &kp H    &hm RCTRL J  &hm RSHFT K  &hm RALT L  &kp BR_SEMI   &kp C_VOLUME_DOWN
&kp LCTRL  &kp Z  &kp X       &kp C           &kp V         &kp B        &kp N    &kp M        &kp COMMA    &kp DOT     &kp BR_SLASH  &kp RC(C_MUTE)
                         &lt 3 CAPSLOCK  &lt 1 ESCAPE  &kp SPACE    &kp RET  &lt 2 DELETE  &lt 6 BACKSPACE
            >;
        };

        number_layer {
            bindings = <
&trans            &kp BR_EXCL   &kp BR_AT    &kp BR_HASH   &kp BR_DLLR  &kp BR_PRCNT  &kp PLUS      &kp N7     &kp N8  &kp N9  &kp BR_BSLH  &trans
&trans            &kp BR_GRAVE  &kp BR_AMPS  &kp BR_ASTRK  &kp BR_LPAR  &kp BR_RPAR   &kp MINUS     &kp N4     &kp N5  &kp N6  &kp COMMA    &kp LEFT_BRACE
&kp LEFT_BRACKET  &kp BR_UNDER  &kp BR_LBRC  &kp BR_RBRC   &kp BR_LT    &kp BR_GT     &kp BR_COLON  &kp N1     &kp N2  &kp N3  &kp BR_EQUAL &kp RIGHT_BRACE
                                               &none         &none        &none         &kp BR_ASTRK  &kp BR_N0  &none
            >;
        };

        symbol_layer {
            bindings = <
&trans        &kp BR_ASTRK  &kp BR_AMPS  &kp BR_LBRC  &kp BR_RBRC  &kp BR_HASH  &kp BR_CIRC   &U_acute  &A_tilde  &O_tilde  &kp BR_CCED  &trans
&trans        &kp BR_COLON  &kp BR_AT    &kp BR_LPAR  &kp BR_RPAR  &kp BR_DQT   &kp BR_ACUT   &I_acute  &A_acute  &O_acute  &E_acute     &kp F10
&kp LEFT_ALT  &kp BR_EXCL   &kp PERCENT  &kp BR_LBKT  &kp BR_RBKT  &kp BR_PIPE  &kp BR_TILDE  &E_circ   &A_circ   &O_circ   &A_grave     &kp F20
                                         &none        &none        &cao         &none         &none     &none
            >;
        };

        accent_layer {
            bindings = <
&trans  &none      &none    &kp HASH  &kp CARET  &none        &kp CARET  &U_acute  &A_tilde  &O_tilde  &kp BR_CCED  &trans
&trans  &kp GRAVE  &kp DQT  &kp SQT   &kp EXCL   &kp TILDE    &kp GRAVE  &I_acute  &A_acute  &O_acute  &E_acute     &trans
&trans  &none      &none    &ac_ccdi  &none      &none        &A_grave   &E_circ   &A_circ   &O_circ   &kp TILDE    &trans
                            &trans    &trans     &trans       &kp ENTER  &kp BSPC  &kp DEL
            >;
        };

        function_layer {
            bindings = <
&trans      &bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &out OUT_TOG    &kp K_SCROLL_UP    &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans      &bt BT_CLR      &trans        &trans        &trans        &trans          &kp K_SCROLL_DOWN  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&sys_reset  &bootloader     &trans        &trans        &trans        &trans          &trans             &kp F9  &kp F10  &kp F11  &kp F12  &trans
                                          &trans        &trans        &trans          &trans             &trans  &tog 4
            >;
        };

        game_layer {
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E           &kp R         &kp T        &kp C_VOLUME_UP    &trans         &trans          &trans  &trans        &desktop
&kp LEFT_SHIFT  &kp A  &kp S  &kp D           &kp F         &kp G        &kp C_VOLUME_DOWN  &trans         &kp LEFT_SHIFT  &trans  &search       &to 0
&kp LCTRL       &kp Z  &kp X  &kp C           &kp V         &kp B        &kp RG(C_MUTE)     &trans         &trans          &trans  &kp LEFT_GUI  &tog 0
                              &mt LEFT_ALT M  &lt 7 ESCAPE  &kp SPACE    &trans             &kp RIGHT_WIN  &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &kp PG_UP  &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC          &kp C_VOLUME_UP    &trans          &kp UP_ARROW  &trans     &trans    &caps_word
&trans  &kp PG_DN  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS          &kp C_VOLUME_DOWN  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &kp LGUI  &desktop
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE          &kp K_MUTE         &guileft        &gui_up       &guiright  &trans    &search
                             &kp LPAR   &kp RPAR   &kp UNDERSCORE    &trans             &trans          &trans
            >;
        };

        fgame_layer {
            bindings = <
&trans  &kp H   &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans        &kp NUMBER_4  &kp N5          &trans  &trans  &trans  &trans  &trans  &kp LA(F4)
&tog 4  &none   &to 0   &none         &kp O         &kp M           &trans  &trans  &trans  &trans  &trans  &to 0
                        &kp J         &kp I         &kp M           &trans  &trans  &trans
            >;
        };

    };
};
